// Generated by gencpp from file differntial_drive_car/cmd_vel_msg.msg
// DO NOT EDIT!


#ifndef DIFFERNTIAL_DRIVE_CAR_MESSAGE_CMD_VEL_MSG_H
#define DIFFERNTIAL_DRIVE_CAR_MESSAGE_CMD_VEL_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace differntial_drive_car
{
template <class ContainerAllocator>
struct cmd_vel_msg_
{
  typedef cmd_vel_msg_<ContainerAllocator> Type;

  cmd_vel_msg_()
    : linear_velocity(0.0)
    , angular_velocity(0.0)  {
    }
  cmd_vel_msg_(const ContainerAllocator& _alloc)
    : linear_velocity(0.0)
    , angular_velocity(0.0)  {
  (void)_alloc;
    }



   typedef float _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef float _angular_velocity_type;
  _angular_velocity_type angular_velocity;





  typedef boost::shared_ptr< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_vel_msg_

typedef ::differntial_drive_car::cmd_vel_msg_<std::allocator<void> > cmd_vel_msg;

typedef boost::shared_ptr< ::differntial_drive_car::cmd_vel_msg > cmd_vel_msgPtr;
typedef boost::shared_ptr< ::differntial_drive_car::cmd_vel_msg const> cmd_vel_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator1> & lhs, const ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator2> & rhs)
{
  return lhs.linear_velocity == rhs.linear_velocity &&
    lhs.angular_velocity == rhs.angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator1> & lhs, const ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace differntial_drive_car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "830d49d85ef543fb78a32609382932d6";
  }

  static const char* value(const ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x830d49d85ef543fbULL;
  static const uint64_t static_value2 = 0x78a32609382932d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "differntial_drive_car/cmd_vel_msg";
  }

  static const char* value(const ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MyCustomMsg.msg\n"
"float32 linear_velocity\n"
"float32 angular_velocity\n"
;
  }

  static const char* value(const ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_velocity);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_vel_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::differntial_drive_car::cmd_vel_msg_<ContainerAllocator>& v)
  {
    s << indent << "linear_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "angular_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFFERNTIAL_DRIVE_CAR_MESSAGE_CMD_VEL_MSG_H
